// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Okapia.Repository;

namespace Okapia.Repository.Migrations
{
    [DbContext(typeof(OkapiaContext))]
    [Migration("20190628152113_add_jobPicture_to_job")]
    partial class add_jobPicture_to_job
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("Relational:Sequence:shared.JobSeq", "'JobSeq', 'shared', '1', '1', '', '', 'Int32', 'False'")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Okapia.Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<int?>("ProvinceId")
                        .HasColumnName("ProvinceID");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Okapia.Domain.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryMetaDesccription")
                        .HasMaxLength(200);

                    b.Property<string>("CategoryMetaTag")
                        .HasMaxLength(200);

                    b.Property<string>("CategoryPageTittle")
                        .HasMaxLength(400);

                    b.Property<int>("CategoryParentId")
                        .HasColumnName("CategoryParentID");

                    b.Property<string>("CategorySeohead")
                        .HasColumnName("CategorySEOHead")
                        .HasMaxLength(400);

                    b.Property<string>("CategorySmallDescription")
                        .HasMaxLength(1000);

                    b.Property<string>("CategoryThumbPicUrl")
                        .HasColumnName("CategoryThumbPicURL")
                        .HasMaxLength(1000);

                    b.Property<string>("CatgoryName")
                        .HasMaxLength(400);

                    b.Property<string>("Job")
                        .HasMaxLength(10);

                    b.Property<string>("JobLinkTitle")
                        .HasMaxLength(100);

                    b.Property<int>("RegisteringEmployeeId")
                        .HasColumnName("RegisteringEmployeeID");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Okapia.Domain.Models.District", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("CityId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Okapia.Domain.Models.Groups", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("GroupCreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GroupDescription")
                        .HasMaxLength(500);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("GroupId");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Okapia.Domain.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JobID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustomerIntroductionLimit");

                    b.Property<string>("InstagramUrl")
                        .HasMaxLength(200);

                    b.Property<bool>("IsDeleted");

                    b.Property<bool?>("IsWebsite");

                    b.Property<string>("JobAccountNumber")
                        .HasMaxLength(400);

                    b.Property<string>("JobAddress")
                        .HasMaxLength(1000);

                    b.Property<double?>("JobBefitPercentForIntroducingEndCustomer");

                    b.Property<double?>("JobBenefitPercentForCompany");

                    b.Property<double?>("JobBenefitPercentForEndCustomer");

                    b.Property<string>("JobCanonicalAddress")
                        .HasMaxLength(300);

                    b.Property<int>("JobCategory");

                    b.Property<int>("JobCityId")
                        .HasColumnName("JobCityID");

                    b.Property<string>("JobContactTitile")
                        .HasMaxLength(400);

                    b.Property<string>("JobContractNumber")
                        .HasMaxLength(10);

                    b.Property<string>("JobDescription");

                    b.Property<double?>("JobDiscountPercentForCompnay");

                    b.Property<double?>("JobDiscountPercentForCustomer");

                    b.Property<double?>("JobDiscountPercentForSabaMehrDiscount");

                    b.Property<string>("JobEmailAddress")
                        .HasMaxLength(200);

                    b.Property<string>("JobGeoLocation");

                    b.Property<string>("JobManagerFirstName")
                        .HasMaxLength(60);

                    b.Property<string>("JobManagerLastName")
                        .HasMaxLength(60);

                    b.Property<string>("JobMap")
                        .HasMaxLength(1000);

                    b.Property<string>("JobMetaDesccription")
                        .HasMaxLength(200);

                    b.Property<string>("JobMetaTag")
                        .HasMaxLength(200);

                    b.Property<string>("JobMobile1")
                        .HasMaxLength(20);

                    b.Property<string>("JobMobile2")
                        .HasMaxLength(50);

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("JobPageTittle")
                        .HasMaxLength(400);

                    b.Property<string>("JobPosNameNumber")
                        .HasMaxLength(400);

                    b.Property<int>("JobProvienceId")
                        .HasColumnName("JobProvienceID");

                    b.Property<string>("JobRemoved301InsteadUrl")
                        .HasColumnName("JobRemoved301InsteadURL")
                        .HasMaxLength(200);

                    b.Property<string>("JobSeohead")
                        .HasColumnName("JobSEOHead")
                        .HasMaxLength(400);

                    b.Property<int?>("JobShowOrderIncategory");

                    b.Property<string>("JobSlug")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("JobSmallDescription")
                        .HasMaxLength(2000);

                    b.Property<string>("JobTel1")
                        .HasMaxLength(20);

                    b.Property<string>("JobTel2")
                        .HasMaxLength(20);

                    b.Property<int?>("MarketerId")
                        .HasColumnName("MarketerID");

                    b.Property<double?>("MarketerPercentForRegisteringShop");

                    b.Property<int?>("RegisteringEmployerId")
                        .HasColumnName("RegisteringEmployerID");

                    b.Property<bool>("ShowInHomePage");

                    b.Property<string>("TelegramUrl")
                        .HasMaxLength(200);

                    b.Property<string>("WebSiteUrl")
                        .HasMaxLength(200);

                    b.HasKey("JobId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("Okapia.Domain.Models.JobPicture", b =>
                {
                    b.Property<int>("JobPictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JobPictureID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JobId")
                        .HasColumnName("JobID");

                    b.Property<string>("JobPicturThumbUrl")
                        .HasColumnName("JobPicturThumbURL")
                        .HasMaxLength(400);

                    b.Property<string>("JobPictureAlt")
                        .HasMaxLength(50);

                    b.Property<string>("JobPictureSmallDescription")
                        .HasMaxLength(400);

                    b.Property<int?>("JobPictureSortOrder");

                    b.Property<string>("JobPictureTitle")
                        .HasMaxLength(100);

                    b.Property<string>("JobPictureUrl")
                        .HasColumnName("JobPictureURL")
                        .HasMaxLength(400);

                    b.HasKey("JobPictureId");

                    b.HasIndex("JobId");

                    b.ToTable("JobPictures");
                });

            modelBuilder.Entity("Okapia.Domain.Models.JobRelation", b =>
                {
                    b.Property<int>("JobRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("JobRelationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JobId")
                        .HasColumnName("JobID");

                    b.Property<int>("RelatedId")
                        .HasColumnName("RelatedID");

                    b.HasKey("JobRelationId");

                    b.ToTable("JobRelations");
                });

            modelBuilder.Entity("Okapia.Domain.Models.JobTransactions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Ammount")
                        .HasColumnType("decimal(18, 3)");

                    b.Property<DateTime>("LocalDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("PanTrunc")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<long>("Rrn")
                        .HasColumnName("RRN");

                    b.Property<decimal>("TrAmmount")
                        .HasColumnType("decimal(18, 3)");

                    b.HasKey("Id");

                    b.ToTable("JobTransactions");
                });

            modelBuilder.Entity("Okapia.Domain.Models.Modals", b =>
                {
                    b.Property<int>("ModalId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModalCreationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModalEndDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ModalGroupId");

                    b.Property<string>("ModalMessage")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("ModalPageLink")
                        .HasMaxLength(1000);

                    b.Property<string>("ModalPic")
                        .HasMaxLength(50);

                    b.Property<DateTime>("ModalStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModalTtitle")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ModalId");

                    b.HasIndex("ModalGroupId");

                    b.ToTable("Modal");
                });

            modelBuilder.Entity("Okapia.Domain.Models.Neighborhood", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("DistrictId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("Neighborhood");
                });

            modelBuilder.Entity("Okapia.Domain.Models.Page", b =>
                {
                    b.Property<int>("PageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PageID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PageCanonicalAddress")
                        .HasMaxLength(300);

                    b.Property<int>("PageCategoryId")
                        .HasColumnName("PageCategoryID");

                    b.Property<string>("PageContent");

                    b.Property<bool?>("PageIsDeleted");

                    b.Property<string>("PageMetaDesccription")
                        .HasMaxLength(200);

                    b.Property<string>("PageMetaTag")
                        .HasMaxLength(200);

                    b.Property<int>("PageRegisteringEmployeeId")
                        .HasColumnName("PageRegisteringEmployeeID");

                    b.Property<DateTime>("PageRegistrationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PageRemoved301InsteadUrl")
                        .HasColumnName("PageRemoved301InsteadURL")
                        .HasMaxLength(200);

                    b.Property<string>("PageSeohead")
                        .HasColumnName("PageSEOHead")
                        .HasMaxLength(400);

                    b.Property<string>("PageSlug")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("PageSmallDescription")
                        .HasMaxLength(2000);

                    b.Property<string>("PageTittle")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.HasKey("PageId");

                    b.HasIndex("PageCategoryId");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("Okapia.Domain.Models.PageCategory", b =>
                {
                    b.Property<int>("PageCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PageCategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PageCanonicalAddress")
                        .HasMaxLength(300);

                    b.Property<bool?>("PageCategoryIsDeleted");

                    b.Property<string>("PageCategoryLinkToolTip")
                        .HasMaxLength(100);

                    b.Property<string>("PageCategoryMetaDesccription")
                        .HasMaxLength(200);

                    b.Property<string>("PageCategoryMetaTag")
                        .HasMaxLength(200);

                    b.Property<string>("PageCategoryName")
                        .HasMaxLength(50);

                    b.Property<string>("PageCategoryPageTittle")
                        .HasMaxLength(400);

                    b.Property<int?>("PageCategoryParentId")
                        .HasColumnName("PageCategoryParentID");

                    b.Property<DateTime>("PageCategoryRegisterDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PageCategoryRegisteredByEmployeId");

                    b.Property<string>("PageCategoryRemoved301InsteadUrl")
                        .HasColumnName("PageCategoryRemoved301InsteadURL")
                        .HasMaxLength(200);

                    b.Property<string>("PageCategorySeohead")
                        .HasColumnName("PageCategorySEOHead")
                        .HasMaxLength(400);

                    b.Property<int?>("PageCategoryShowOrder");

                    b.Property<string>("PageCategorySlug")
                        .HasMaxLength(200);

                    b.Property<string>("PageCategorySmallPictutre")
                        .HasMaxLength(400);

                    b.Property<string>("PageCategorySmallPictutreAlt")
                        .HasMaxLength(400);

                    b.HasKey("PageCategoryId");

                    b.HasIndex("PageCategoryParentId");

                    b.ToTable("PageCategory");
                });

            modelBuilder.Entity("Okapia.Domain.Models.PageComments", b =>
                {
                    b.Property<int>("PageCommentId")
                        .HasColumnName("PageCommentID");

                    b.Property<int>("CommentAgrreCount");

                    b.Property<DateTime>("CommentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CommentDisAgreeCount");

                    b.Property<string>("CommentPageUrl")
                        .HasColumnName("CommentPageURL")
                        .HasMaxLength(200);

                    b.Property<string>("CommentTitle")
                        .HasMaxLength(200);

                    b.Property<int?>("CommentUserId")
                        .HasColumnName("CommentUserID");

                    b.Property<string>("CommnetText")
                        .HasMaxLength(4000);

                    b.Property<bool?>("IsConfirmedByAdminiStrator");

                    b.Property<int?>("PageCommentConfiringUserId")
                        .HasColumnName("PageCommentConfiringUserID");

                    b.Property<DateTime?>("PageCommentConfirmDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PageId")
                        .HasColumnName("PageID");

                    b.HasKey("PageCommentId");

                    b.HasIndex("PageId");

                    b.ToTable("PageComments");
                });

            modelBuilder.Entity("Okapia.Domain.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("ID");

                    b.Property<string>("Province1")
                        .HasColumnName("Province")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("Okapia.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserAddress")
                        .HasMaxLength(500);

                    b.Property<DateTime?>("UserBirthDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserCity");

                    b.Property<int>("UserCustomerIntroductionLimit");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(50);

                    b.Property<string>("UserFirstName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<bool>("UserIsActivated");

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("UserNationalCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13);

                    b.Property<string>("UserPostalCode")
                        .HasMaxLength(20);

                    b.Property<int>("UserProvince");

                    b.Property<DateTime>("UserRegistrationDate")
                        .HasColumnType("datetime");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Okapia.Domain.City", b =>
                {
                    b.HasOne("Okapia.Domain.Models.Province", "Province")
                        .WithMany("City")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_City_Province");
                });

            modelBuilder.Entity("Okapia.Domain.Models.District", b =>
                {
                    b.HasOne("Okapia.Domain.City", "City")
                        .WithMany("District")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_District_City");
                });

            modelBuilder.Entity("Okapia.Domain.Models.JobPicture", b =>
                {
                    b.HasOne("Okapia.Domain.Models.Job", "Job")
                        .WithMany("JobPictures")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK_JobPicture_Jobs");
                });

            modelBuilder.Entity("Okapia.Domain.Models.Modals", b =>
                {
                    b.HasOne("Okapia.Domain.Models.Groups", "ModalGroup")
                        .WithMany("Modals")
                        .HasForeignKey("ModalGroupId")
                        .HasConstraintName("FK_Modals_Groups");
                });

            modelBuilder.Entity("Okapia.Domain.Models.Neighborhood", b =>
                {
                    b.HasOne("Okapia.Domain.Models.District", "District")
                        .WithMany("Neighborhood")
                        .HasForeignKey("DistrictId")
                        .HasConstraintName("FK_Neighborhood_District");
                });

            modelBuilder.Entity("Okapia.Domain.Models.Page", b =>
                {
                    b.HasOne("Okapia.Domain.Models.PageCategory", "PageCategory")
                        .WithMany("Page")
                        .HasForeignKey("PageCategoryId")
                        .HasConstraintName("FK_Page_PageCategory");
                });

            modelBuilder.Entity("Okapia.Domain.Models.PageCategory", b =>
                {
                    b.HasOne("Okapia.Domain.Models.PageCategory", "PageCategoryParent")
                        .WithMany("InversePageCategoryParent")
                        .HasForeignKey("PageCategoryParentId")
                        .HasConstraintName("FK_PageCategory_PageCategory");
                });

            modelBuilder.Entity("Okapia.Domain.Models.PageComments", b =>
                {
                    b.HasOne("Okapia.Domain.Models.Page", "Page")
                        .WithMany("PageComments")
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_PageComments_Page");
                });
#pragma warning restore 612, 618
        }
    }
}
